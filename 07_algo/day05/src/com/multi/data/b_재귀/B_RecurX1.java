// 재귀에 대한 이해를 돕는 순수 재귀 메서드(꼬리 재귀를 제거)
//재귀 함수의 가장 큰 문제가 자기 자신을 호출한 뒤 결과를 기다리면서 생기는 콜스택의 부하로 인한 메모리낭비
// -> 재귀 함수는 호출 시 마다 스택 공간에 뭔가를 저장하기 때문에, 무리하게 호출하면 스택이 계속 쌓여 '스택 오버플로우'가 발생할 수 있다!

//위 해결 하기위해 꼬리재귀사용
//꼬리 재귀(꼬리 재귀는 '재귀 호출이 끝나면 아무 일도 하지 않고 결과만 바로 반환되도록 하는' 방법)라는 개념을 이용하면
//함수의 상태 유지 및 추가 연산을 하지 않기에 스택 오버 플로우 해결할 수 있다.
// 이때 함수자체만 리턴 recur(n - 1); 하는것은 꼬리 재귀가 가능한데 recur(n - 1) * m 이런식으로 섞여있으면 꼬리재귀 불가
package com.multi.data.b_재귀;

class B_RecurX1 {
	// --- 꼬리 재귀를 제거한 recur ---//
	static void recur(int n) {
		while (n > 0) {


			recur(n - 1);
			System.out.println("recur()함수 호출후 n-2: >> " + n);

			n = n - 2;

		}
	}

	public static void main(String[] args) {
		int x = 5;
		recur(x);
	}
}
